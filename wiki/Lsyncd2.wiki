#summary Manual to Lsyncd Version 2.x.

= Introduction =
Lsyncd version 2.0 is currently in development as a complete recode of Lsyncd 1.x. *This manual is as well in development*.

= What's new in 2.0? =
  * Lsyncd 2.x allows you to specify different actions for different kind of events. Particularly moves can now be implemented to be moved locally at the target instead of hitherto deletion of the source and retransfer of the destination.

  * Multiple events on one file or directory are still collapsed as in Lsyncd 1.33+. But lsyncd 2 tracking the kind of event collapses events logically. E.g. A _Create_ and a _Modify_ will be collapsed in a _Create_, a _Modify_ and a _Delete_ in a _Delete_, a _Create_ and a _Delete_ within the wait time as it often happens with temporary files will annihalte each other and result in Lsyncd doing nothing.

  * Multiple targets now each have their own waiting list of events. A slow responding targets server no longer delays other targets.

  * Lsyncd can be configured to run multiple processes at once for one child. It will resolve any conflicts and only run processes in parallel for files and directories that don't interfere with each other.

  * Lsyncd 2.x does no longer halt and wait for a return of child processes it spawned. The kernels inotify queue will thus continously being drained making _Overflows_ less likely.

  * The format of the config file has changed completely. Instead of XML the configuration file has to be valid [http://www.lua.org/ Lua syntax]. 

  * Consequently Lsyncd 2 has no binding to libxml2 anymore, but instead liblua5.1

  * Users can create short scripts right within the config file.

  * Effort has been made while making the most common application of Lsyncd using rsync easy with default settings to keep lsyncd tidy as a general purpose file watching and action tool.

  * Retry on network error is now an integral part of Lsyncd.

  * Has exclude patterns that work.

  * The new setting "statusfile" will instruct Lsyncd to periodically write a report of its status in this file. E.g. amount of directories being watched, events in queue, actions in process etc.

  * A good part of the Lsyncd daemon itself is now coded in Lua. 

= Compiling Lsyncd =

Building Lsyncd is a straight forward standard process for unix packages. Unpack the downloaded tar.gz-file and run:
{{{
./configure
make
sudo make install
}}}

When you grabbed the source directly from subversion run {{{./autogen.sh}}} first.

With this standard configuration the parts of Lsyncd written in Lua ("the runner") will be compiled into the binary. This results into a self-sufficient one-file binary. The runner can be left as external file with the {{{--with-runner=DIRECTORY}}} option. 

= Invoking Lsyncd =

Lsyncd 2.0 is designed to be primarily configured through a config file (see below). The config file can thus be the only command line optin.
{{{
lsyncd CONFIGFILE
}}}

Altough for standard use or quick testing it can be cursorily facilely configured by commandline. This will keep a local src and dst directory in sync using rsync.
{{{
lsyncd -rsync /home/USER/src /home/USER/dst
}}}

The target can here be anything that rsync recognizes.
{{{
lsyncd -rsync /home/USER/src remotehost:dst
}}}

Two (and more) targets are configured by calling -rsync twice (or more).
{{{
lsyncd -rsync /home/USER/src remotehost1:dst -rsync /home/USER/src remotehost2:dst 
}}}

A disadvantage with rsync synchronisation is that normally directory and file moves result in a deletion of the move origin and a retransfer of the move destination of the wire. A mean improvement of Lsyncd 2.0 it now can use ssh commands to move the directories and files locally on the target. To use this use {{{-rsyncssh}}} followed by the local source directory, the remote host and the destination directory there. The REMOTEHOST can include a user like {{{me@remotehost.com}}}.
{{{
lsyncd -rsyncssh /home/USER/src REMOTEHOST DESTDIR
}}}


= The Configuration File =

= Examples =

= Developer Manual =

When developing it is wise to configure lsyncd to use the runner in the development directory. So you do not have to rerun make everytime you change lsyncd.lua.
{{{
./configure --with-runner=/home/USER/lsyncd2/
}}}

== Why Lua and not ...? =